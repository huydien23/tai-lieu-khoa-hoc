@model QuanLyTaiLieuKhoaHoc.Web.Models.ViewModels.PaginatedList<QuanLyTaiLieuKhoaHoc.Web.Models.NguoiDung>

@{
    ViewData["Title"] = "Quản lý Người dùng";
}

<link rel="stylesheet" href="~/css/user-management.css" />

<!-- Modern Header -->
<div class="user-management-header">
    <div class="header-content">
        <div class="header-left">
            <div class="header-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="header-text">
                <h1>Quản lý Người dùng</h1>
                <p>Quản lý tài khoản người dùng trong hệ thống</p>
            </div>
        </div>
        <div class="header-actions">
            <div class="search-container">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="search-input" id="userSearch" placeholder="Tìm kiếm người dùng...">
                    <button class="search-btn" type="button" title="Bộ lọc tìm kiếm">
                        <i class="fas fa-filter"></i>
                    </button>
                </div>
            </div>
            <button type="button" class="btn-add-user" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="fas fa-plus"></i>
                Thêm người dùng
            </button>
        </div>
    </div>
</div>

<!-- Stats Cards -->
<div class="stats-container">
    <div class="stat-card">
        <div class="stat-header">
            <div class="stat-icon users">
                <i class="fas fa-users"></i>
            </div>
        </div>
        <div class="stat-number">@Model?.TotalCount</div>
        <div class="stat-label">Tổng người dùng</div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <div class="stat-icon active">
                <i class="fas fa-user-check"></i>
            </div>
        </div>
        <div class="stat-number">@Model?.Count(u => u.TrangThaiHoatDong)</div>
        <div class="stat-label">Đang hoạt động</div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <div class="stat-icon inactive">
                <i class="fas fa-user-times"></i>
            </div>
        </div>
        <div class="stat-number">@Model?.Count(u => !u.TrangThaiHoatDong)</div>
        <div class="stat-label">Đã vô hiệu</div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <div class="stat-icon new">
                <i class="fas fa-user-plus"></i>
            </div>
        </div>
        <div class="stat-number">@Model?.Count(u => u.NgayTao.Date == DateTime.Today)</div>
        <div class="stat-label">Mới hôm nay</div>
    </div>
</div>

<!-- Filters Section -->
<div class="filters-section">
    <div class="filters-container">
        <div class="filter-group">
            <label class="filter-label">Vai trò</label>
            <select class="filter-select" id="roleFilter">
                <option value="">Tất cả vai trò</option>
                <option value="ThuThu">Thủ thư</option>
                <option value="GiangVien">Giảng viên</option>
                <option value="SinhVien">Sinh viên</option>
            </select>
        </div>
        <div class="filter-group">
            <label class="filter-label">Trạng thái</label>
            <select class="filter-select" id="statusFilter">
                <option value="">Tất cả trạng thái</option>
                <option value="true">Đang hoạt động</option>
                <option value="false">Đã vô hiệu</option>
            </select>
        </div>
        <div class="filter-group">
            <label class="filter-label">Chuyên ngành</label>
            <select class="filter-select" id="majorFilter">
                <option value="">Tất cả chuyên ngành</option>
                @if (Model != null)
                {
                    var majors = Model.Where(u => u.ChuyenNganh != null).Select(u => u.ChuyenNganh.TenChuyenNganh).Distinct();
                    foreach (var major in majors)
                    {
                        <option value="@major">@major</option>
                    }
                }
            </select>
        </div>
        <div class="filter-group">
            <label class="filter-label">Ngày tạo</label>
            <select class="filter-select" id="dateFilter">
                <option value="">Tất cả thời gian</option>
                <option value="today">Hôm nay</option>
                <option value="week">Tuần này</option>
                <option value="month">Tháng này</option>
            </select>
        </div>
        <div class="filter-group">
            <button type="button" class="btn-filter" onclick="applyFilters()">
                <i class="fas fa-filter me-2"></i>Lọc
            </button>
        </div>
    </div>
</div>

<!-- Users Table -->
<div class="table-container">
    <div class="table-header">
        <h3 class="table-title">
            <i class="fas fa-list me-2"></i>Danh sách người dùng
        </h3>
        <div class="table-actions">
            <button type="button" class="btn-bulk-action" onclick="exportUsers()">
                <i class="fas fa-download me-2"></i>Xuất Excel
            </button>
            <button type="button" class="btn-bulk-action" onclick="bulkActivate()">
                <i class="fas fa-check me-2"></i>Kích hoạt hàng loạt
            </button>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table" id="usersTable">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                    </th>
                    <th>Họ tên</th>
                    <th>Email</th>
                    <th>Mã số</th>
                    <th>Vai trò</th>
                    <th>Chuyên ngành</th>
                    <th>Trạng thái</th>
                    <th>Ngày tạo</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @if (Model?.Any() == true)
                {
                    @foreach (var user in Model)
                    {
                        <tr data-user-id="@user.Id" data-role="@user.VaiTro" data-status="@user.TrangThaiHoatDong" data-major="@(user.ChuyenNganh?.TenChuyenNganh ?? "")" data-date="@user.NgayTao.ToString("yyyy-MM-dd")">
                            <td>
                                <input type="checkbox" class="user-checkbox" value="@user.Id">
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar-circle me-3">
                                        @user.HoTen.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="fw-bold">@user.HoTen</div>
                                        <small class="text-muted">@user.Email</small>
                                    </div>
                                </div>
                            </td>
                            <td>@user.Email</td>
                            <td>
                                @if (!string.IsNullOrEmpty(user.MaSo))
                                {
                                    <span class="badge bg-secondary">@user.MaSo</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                @switch (user.VaiTro)
                                {
                                    case QuanLyTaiLieuKhoaHoc.Web.Models.VaiTroNguoiDung.ThuThu:
                                        <span class="badge bg-primary">Thủ thư</span>
                                        break;
                                    case QuanLyTaiLieuKhoaHoc.Web.Models.VaiTroNguoiDung.GiangVien:
                                        <span class="badge bg-success">Giảng viên</span>
                                        break;
                                    case QuanLyTaiLieuKhoaHoc.Web.Models.VaiTroNguoiDung.SinhVien:
                                        <span class="badge bg-info">Sinh viên</span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">Không xác định</span>
                                        break;
                                }
                            </td>
                            <td>
                                @if (user.ChuyenNganh != null)
                                {
                                    @user.ChuyenNganh.TenChuyenNganh
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                @if (user.TrangThaiHoatDong)
                                {
                                    <span class="badge bg-success">Hoạt động</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Không hoạt động</span>
                                }
                            </td>
                            <td>@user.NgayTao.ToString("dd/MM/yyyy")</td>
                            <td>
                                <div class="action-buttons">
                                    <button type="button" class="btn-action btn-edit" title="Chỉnh sửa"
                                        onclick="editUser('@user.Id', '@user.HoTen')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn-action btn-password" title="Đổi mật khẩu"
                                        onclick="changePassword('@user.Id', '@user.HoTen', '@user.Email')">
                                        <i class="fas fa-key"></i>
                                    </button>
                                    @if (user.TrangThaiHoatDong)
                                    {
                                        <button type="button" class="btn-action btn-toggle" title="Vô hiệu hóa"
                                            onclick="toggleUserStatus('@user.Id', '@user.HoTen', false)">
                                            <i class="fas fa-ban"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn-action btn-activate" title="Kích hoạt"
                                            onclick="toggleUserStatus('@user.Id', '@user.HoTen', true)">
                                            <i class="fas fa-check"></i>
                                        </button>
                                    }
                                    <button type="button" class="btn-action btn-delete" title="Xóa"
                                        onclick="deleteUser('@user.Id', '@user.HoTen')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9">
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fas fa-users"></i>
                                </div>
                                <h3>Không có người dùng nào</h3>
                                <p>Hiện tại chưa có người dùng nào trong hệ thống.</p>
                                <button type="button" class="btn-add-user" data-bs-toggle="modal" data-bs-target="#addUserModal">
                                    <i class="fas fa-plus me-2"></i>Thêm người dùng đầu tiên
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
@if (Model != null && Model.TotalPages > 1)
{
    <div class="pagination-container">
        <nav aria-label="Phân trang">
            <ul class="pagination justify-content-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("ManageUsers", new { page = Model.PageIndex - 1, search = ViewData["CurrentSearch"], role = ViewData["CurrentRole"], status = ViewData["CurrentStatus"], major = ViewData["CurrentMajor"] })">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="fas fa-chevron-left"></i>
                        </span>
                    </li>
                }

                @{
                    var startPage = Math.Max(1, Model.PageIndex - 2);
                    var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("ManageUsers", new { page = 1, search = ViewData["CurrentSearch"], role = ViewData["CurrentRole"], status = ViewData["CurrentStatus"], major = ViewData["CurrentMajor"] })">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    if (i == Model.PageIndex)
                    {
                        <li class="page-item active">
                            <span class="page-link">@i</span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("ManageUsers", new { page = i, search = ViewData["CurrentSearch"], role = ViewData["CurrentRole"], status = ViewData["CurrentStatus"], major = ViewData["CurrentMajor"] })">@i</a>
                        </li>
                    }
                }

                @if (endPage < Model.TotalPages)
                {
                    @if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("ManageUsers", new { page = Model.TotalPages, search = ViewData["CurrentSearch"], role = ViewData["CurrentRole"], status = ViewData["CurrentStatus"], major = ViewData["CurrentMajor"] })">@Model.TotalPages</a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("ManageUsers", new { page = Model.PageIndex + 1, search = ViewData["CurrentSearch"], role = ViewData["CurrentRole"], status = ViewData["CurrentStatus"], major = ViewData["CurrentMajor"] })">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="fas fa-chevron-right"></i>
                        </span>
                    </li>
                }
            </ul>
        </nav>
        <div class="pagination-info text-center mt-2">
            <small class="text-muted">
                Hiển thị @((Model.PageIndex - 1) * Model.PageSize + 1) - @Math.Min(Model.PageIndex * Model.PageSize, Model.TotalCount) trong tổng số @Model.TotalCount người dùng
            </small>
        </div>
    </div>
}
        </div>
    </div>
</div>

<!-- Modal thêm người dùng -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">
                    <i class="fas fa-user-plus text-primary me-2"></i>Thêm người dùng mới
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addUserForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserHoTen" class="form-label">Họ tên <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="addUserHoTen" name="HoTen" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserEmail" class="form-label">Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="addUserEmail" name="Email" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserMaSo" class="form-label">Mã số</label>
                                <input type="text" class="form-control" id="addUserMaSo" name="MaSo" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserVaiTro" class="form-label">Vai trò <span class="text-danger">*</span></label>
                                <select class="form-select" id="addUserVaiTro" name="VaiTro" required>
                                    <option value="">-- Chọn vai trò --</option>
                                    <option value="ThuThu">Thủ thư</option>
                                    <option value="GiangVien">Giảng viên</option>
                                    <option value="SinhVien">Sinh viên</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserChuyenNganh" class="form-label">Chuyên ngành</label>
                                <input type="text" class="form-control" id="addUserChuyenNganh" name="ChuyenNganh" list="majorsList" />
                                <datalist id="majorsList">
                                    @if (Model != null)
                                    {
                                        var majors = Model.Where(u => u.ChuyenNganh != null).Select(u => u.ChuyenNganh.TenChuyenNganh).Distinct();
                                        foreach (var major in majors)
                                        {
                                            <option value="@major" />
                                        }
                                    }
                                </datalist>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="addUserSoDienThoai" class="form-label">Số điện thoại</label>
                                <input type="tel" class="form-control" id="addUserSoDienThoai" name="SoDienThoai" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Thêm người dùng
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal đổi mật khẩu người dùng -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">
                    <i class="fas fa-key text-info me-2"></i>Đổi mật khẩu người dùng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="changePasswordForm">
                <div class="modal-body">
                    <input type="hidden" id="changePasswordUserId" />
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Người dùng:</strong> <span id="changePasswordUserName"></span><br>
                        <strong>Email:</strong> <span id="changePasswordUserEmail"></span>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Mật khẩu mới <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" name="newPassword" required minlength="6" onkeyup="checkPasswordStrength(this.value)" />
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePasswordVisibility('newPassword')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="password-strength">
                            <div class="strength-bar">
                                <div class="strength-fill" id="strengthFill"></div>
                            </div>
                            <div class="strength-text" id="strengthText">Nhập mật khẩu để kiểm tra độ mạnh</div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Xác nhận mật khẩu <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required minlength="6" onkeyup="checkPasswordMatch()" />
                            <button class="btn btn-outline-secondary" type="button" onclick="togglePasswordVisibility('confirmPassword')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="form-text" id="passwordMatchText"></div>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Lưu ý:</strong> Sau khi đổi mật khẩu, hãy thông báo cho người dùng biết mật khẩu mới và khuyến khích họ đổi lại mật khẩu sau khi đăng nhập.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-save me-2"></i>Đổi mật khẩu
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal chỉnh sửa người dùng -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">
                    <i class="fas fa-user-edit text-primary me-2"></i>Chỉnh sửa người dùng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editUserForm">
                <input type="hidden" id="editUserId" name="Id" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editUserHoTen" class="form-label">Họ tên</label>
                        <input type="text" class="form-control" id="editUserHoTen" name="HoTen" required />
                    </div>
                    <div class="mb-3">
                        <label for="editUserEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editUserEmail" name="Email" required />
                    </div>
                    <div class="mb-3">
                        <label for="editUserMaSo" class="form-label">Mã số</label>
                        <input type="text" class="form-control" id="editUserMaSo" name="MaSo" />
                    </div>
                    <div class="mb-3">
                        <label for="editUserVaiTro" class="form-label">Vai trò</label>
                        <select class="form-select" id="editUserVaiTro" name="VaiTro" required>
                            <option value="">-- Chọn vai trò --</option>
                            <option value="ThuThu">Thủ thư</option>
                            <option value="GiangVien">Giảng viên</option>
                            <option value="SinhVien">Sinh viên</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editUserChuyenNganh" class="form-label">Chuyên ngành</label>
                        <input type="text" class="form-control" id="editUserChuyenNganh" name="ChuyenNganh" />
                    </div>
                    <div class="mb-3">
                        <label for="editUserSoDienThoai" class="form-label">Số điện thoại</label>
                        <input type="text" class="form-control" id="editUserSoDienThoai" name="SoDienThoai" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        $('#userSearch').on('keyup', function() {
            var searchTerm = $(this).val().toLowerCase();
            $('#usersTable tbody tr').each(function() {
                var userName = $(this).find('td:eq(1)').text().toLowerCase();
                var userEmail = $(this).find('td:eq(2)').text().toLowerCase();
                var userCode = $(this).find('td:eq(3)').text().toLowerCase();
                
                if (userName.includes(searchTerm) || userEmail.includes(searchTerm) || userCode.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        // Filter functionality
        function applyFilters() {
            var roleFilter = $('#roleFilter').val();
            var statusFilter = $('#statusFilter').val();
            var majorFilter = $('#majorFilter').val();
            var dateFilter = $('#dateFilter').val();
            
            $('#usersTable tbody tr').each(function() {
                var row = $(this);
                var role = row.data('role');
                var status = row.data('status').toString();
                var major = row.data('major');
                var date = row.data('date');
                
                var showRow = true;
                
                if (roleFilter && role !== roleFilter) showRow = false;
                if (statusFilter && status !== statusFilter) showRow = false;
                if (majorFilter && major !== majorFilter) showRow = false;
                if (dateFilter) {
                    var userDate = new Date(date);
                    var today = new Date();
                    var diffTime = Math.abs(today - userDate);
                    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    
                    if (dateFilter === 'today' && diffDays > 1) showRow = false;
                    if (dateFilter === 'week' && diffDays > 7) showRow = false;
                    if (dateFilter === 'month' && diffDays > 30) showRow = false;
                }
                
                if (showRow) {
                    row.show();
                } else {
                    row.hide();
                }
            });
        }

        // Bulk actions
        function toggleSelectAll() {
            var isChecked = $('#selectAll').is(':checked');
            $('.user-checkbox').prop('checked', isChecked);
        }

        function bulkActivate() {
            var selectedUsers = $('.user-checkbox:checked').map(function() {
                return $(this).val();
            }).get();
            
            if (selectedUsers.length === 0) {
                toastr.warning('Vui lòng chọn ít nhất một người dùng.');
                return;
            }
            
            if (confirm(`Bạn có chắc chắn muốn kích hoạt ${selectedUsers.length} người dùng đã chọn?`)) {
                $.ajax({
                    url: '@Url.Action("BulkActivateUsers", "Librarian")',
                    type: 'POST',
                    data: { userIds: selectedUsers },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(function () { location.reload(); }, 1000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error('Có lỗi xảy ra khi kích hoạt người dùng.');
                    }
                });
            }
        }

        function exportUsers() {
            var searchTerm = $('#userSearch').val();
            var roleFilter = $('#roleFilter').val();
            var statusFilter = $('#statusFilter').val();
            var majorFilter = $('#majorFilter').val();
            
            var params = new URLSearchParams();
            if (searchTerm) params.append('search', searchTerm);
            if (roleFilter) params.append('role', roleFilter);
            if (statusFilter) params.append('status', statusFilter);
            if (majorFilter) params.append('major', majorFilter);
            
            window.location.href = '@Url.Action("ExportUsers", "Librarian")?' + params.toString();
        }

        // Password strength checker
        function checkPasswordStrength(password) {
            var strength = 0;
            var feedback = '';
            
            if (password.length >= 6) strength++;
            if (password.length >= 8) strength++;
            if (/[a-z]/.test(password)) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/[0-9]/.test(password)) strength++;
            if (/[^A-Za-z0-9]/.test(password)) strength++;
            
            var strengthFill = $('#strengthFill');
            var strengthText = $('#strengthText');
            
            strengthFill.removeClass('strength-weak strength-medium strength-strong strength-very-strong');
            
            if (password.length === 0) {
                strengthFill.css('width', '0%');
                strengthText.text('Nhập mật khẩu để kiểm tra độ mạnh');
                strengthText.css('color', '#6b7280');
            } else if (strength <= 2) {
                strengthFill.addClass('strength-weak');
                strengthText.text('Mật khẩu yếu');
                strengthText.css('color', '#ef4444');
            } else if (strength <= 3) {
                strengthFill.addClass('strength-medium');
                strengthText.text('Mật khẩu trung bình');
                strengthText.css('color', '#f59e0b');
            } else if (strength <= 4) {
                strengthFill.addClass('strength-strong');
                strengthText.text('Mật khẩu mạnh');
                strengthText.css('color', '#10b981');
            } else {
                strengthFill.addClass('strength-very-strong');
                strengthText.text('Mật khẩu rất mạnh');
                strengthText.css('color', '#10b981');
            }
        }

        function checkPasswordMatch() {
            var password = $('#newPassword').val();
            var confirmPassword = $('#confirmPassword').val();
            var matchText = $('#passwordMatchText');
            
            if (confirmPassword.length === 0) {
                matchText.text('');
            } else if (password === confirmPassword) {
                matchText.text('✓ Mật khẩu khớp');
                matchText.css('color', '#10b981');
            } else {
                matchText.text('✗ Mật khẩu không khớp');
                matchText.css('color', '#ef4444');
            }
        }

        // Form submission
        $('#addUserForm').on('submit', function (e) {
            e.preventDefault();
            var formData = $(this).serialize();
            $.ajax({
                url: '@Url.Action("AddUser", "Librarian")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#addUserModal').modal('hide');
                        $('#addUserForm')[0].reset();
                        setTimeout(function () { location.reload(); }, 1000);
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error('Có lỗi xảy ra khi thêm người dùng.');
                }
            });
        });

        // Sửa người dùng
        function editUser(userId, userName) {
            // Lấy dữ liệu user bằng AJAX
            $.ajax({
                url: '@Url.Action("GetUserById", "Librarian")',
                type: 'GET',
                data: { id: userId },
                success: function (user) {
                    if (user) {
                        $('#editUserId').val(user.id);
                        $('#editUserHoTen').val(user.hoTen);
                        $('#editUserEmail').val(user.email);
                        $('#editUserMaSo').val(user.maSo);
                        $('#editUserVaiTro').val(user.vaiTro);
                        $('#editUserChuyenNganh').val(user.chuyenNganh || '');
                        $('#editUserSoDienThoai').val(user.soDienThoai || ''); // Thêm dòng này
                        $('#editUserModal').modal('show');
                    } else {
                        toastr.error('Không tìm thấy thông tin người dùng.');
                    }
                },
                error: function () {
                    toastr.error('Không thể lấy dữ liệu người dùng.');
                }
            });
        }

        // Xử lý submit form chỉnh sửa
        $('#editUserForm').on('submit', function (e) {
            e.preventDefault();
            var formData = $(this).serialize();
            $.ajax({
                url: '@Url.Action("EditUser", "Librarian")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#editUserModal').modal('hide');
                        setTimeout(function () { location.reload(); }, 1000);
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error('Có lỗi xảy ra khi lưu thay đổi.');
                }
            });
        });

        // Kích hoạt/Vô hiệu hóa tài khoản
        function toggleUserStatus(userId, userName, isActivating) {
            const action = isActivating ? 'kích hoạt' : 'vô hiệu hóa';
            if (confirm(`Bạn có chắc chắn muốn ${action} tài khoản "${userName}"?`)) {
                $.ajax({
                    url: '@Url.Action("ToggleUserStatus", "Librarian")',
                    type: 'POST',
                    data: { userId: userId },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(function () { location.reload(); }, 1000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error('Có lỗi xảy ra: ' + error);
                    }
                });
            }
        }

        // Xóa người dùng
        function deleteUser(userId, userName) {
            if (confirm(`Bạn có chắc chắn muốn xóa người dùng "${userName}"?\n\nLưu ý: Chỉ có thể xóa khi người dùng không còn tài liệu nào trong hệ thống.`)) {
                $.ajax({
                    url: '@Url.Action("DeleteUser", "Librarian")',
                    type: 'POST',
                    data: { id: userId },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(function () { location.reload(); }, 1000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error('Có lỗi xảy ra: ' + error);
                    }
                });
            }
        }

        // Đổi mật khẩu người dùng
        function changePassword(userId, userName, userEmail) {
            $('#changePasswordUserId').val(userId);
            $('#changePasswordUserName').text(userName);
            $('#changePasswordUserEmail').text(userEmail);
            $('#changePasswordModal').modal('show');
        }

        // Xử lý submit form đổi mật khẩu
        $('#changePasswordForm').on('submit', function (e) {
            e.preventDefault();
            
            var newPassword = $('#newPassword').val();
            var confirmPassword = $('#confirmPassword').val();
            
            if (newPassword !== confirmPassword) {
                toastr.error('Mật khẩu xác nhận không khớp!');
                return;
            }
            
            if (newPassword.length < 6) {
                toastr.error('Mật khẩu phải có ít nhất 6 ký tự!');
                return;
            }
            
            var formData = {
                userId: $('#changePasswordUserId').val(),
                newPassword: newPassword
            };
            
            $.ajax({
                url: '@Url.Action("ChangeUserPassword", "Librarian")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#changePasswordModal').modal('hide');
                        $('#changePasswordForm')[0].reset();
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function () {
                    toastr.error('Có lỗi xảy ra khi đổi mật khẩu.');
                }
            });
        });

        // Toggle hiển thị mật khẩu
        function togglePasswordVisibility(inputId) {
            var input = document.getElementById(inputId);
            var button = input.nextElementSibling;
            var icon = button.querySelector('i');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Initialize tooltips
        $(document).ready(function() {
            // Auto-hide alerts after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut();
            }, 5000);
            
            // Initialize any additional plugins if needed
        });
    </script>
}
