@model IEnumerable<QuanLyTaiLieuKhoaHoc.Web.Models.PhieuMuonTra>
@{
    ViewData["Title"] = "Lịch sử mượn/trả tài liệu";
}

<!-- Modern Header -->
<div class="history-header mb-4">
    <div class="row align-items-center">
        <div class="col-md-6">
            <h4 class="mb-0">
                <i class="fas fa-history text-primary me-2"></i>
                Lịch sử mượn trả
            </h4>
            <p class="text-muted mb-0 mt-1">Quản lý và theo dõi lịch sử mượn trả tài liệu</p>
        </div>
        <div class="col-md-6 text-md-end">
            <div class="history-stats">
                <span class="stat-badge">
                    <i class="fas fa-clipboard-list"></i>
                    <span id="totalRecords">@Model.Count()</span> phiếu
                </span>
                <span class="stat-badge">
                    <i class="fas fa-clock"></i>
                    <span id="pendingReturns">@Model.Count(p => p.TrangThai == QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaDuyet && !p.NgayTra.HasValue)</span> đang mượn
                </span>
                <span class="stat-badge">
                    <i class="fas fa-check-circle"></i>
                    <span id="completedReturns">@Model.Count(p => p.TrangThai == QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaTra)</span> đã trả
                </span>
            </div>
        </div>
    </div>
</div>

<!-- History Cards Container -->
<div id="historyCardsContainer">
    <div class="row" id="historyCards">
        @foreach (var item in Model)
        {
            <div class="col-lg-6 col-xl-4 mb-3 history-card" 
                 data-status="@item.TrangThai.ToString()"
                 data-date="@item.NgayMuon.ToString("yyyy-MM-dd")"
                 data-search="@($"{item.MaPhieu} {item.TaiLieu?.TenTaiLieu} {(item.NguoiMuon?.HoTen ?? item.HoTenNguoiMuon)}").ToLower()">
                <div class="card history-item-card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <div class="history-icon me-2">
                                @if (item.TrangThai == QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaTra)
                                {
                                    <i class="fas fa-check-circle text-success"></i>
                                }
                                else if (item.TrangThai == QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaDuyet)
                                {
                                    <i class="fas fa-clock text-warning"></i>
                                }
                                else
                                {
                                    <i class="fas fa-file-alt text-primary"></i>
                                }
                            </div>
                            <div>
                                <h6 class="mb-0">Phiếu #@item.MaPhieu</h6>
                                <small class="text-muted">@item.NgayMuon.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                        </div>
                        <div class="status-badge @GetStatusClass(item.TrangThai)">
                            @GetStatusText(item.TrangThai)
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="history-item-info">
                            <div class="info-row">
                                <span class="info-label">Tài liệu:</span>
                                <span class="info-value">@item.TaiLieu?.TenTaiLieu</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Người mượn:</span>
                                <span class="info-value">
                                    @if (item.NguoiMuon != null)
                                    {
                                        @item.NguoiMuon.HoTen
                                    }
                                    else if (!string.IsNullOrEmpty(item.HoTenNguoiMuon))
                                    {
                                        @item.HoTenNguoiMuon
                                        @if (!string.IsNullOrEmpty(item.MaSoNguoiMuon))
                                        {
                                            @($" ({item.MaSoNguoiMuon})")
                                        }
                                    }
                                    else
                                    {
                                        @:"-"
                                    }
                                </span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Ngày trả dự kiến:</span>
                                <span class="info-value @(item.NgayTraDuKien < DateTime.Now && !item.NgayTra.HasValue ? "text-danger" : "")">
                                    @(item.NgayTraDuKien?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </span>
                            </div>
                            @if (item.NgayTra.HasValue)
                            {
                                <div class="info-row">
                                    <span class="info-label">Ngày trả thực tế:</span>
                                    <span class="info-value text-success">
                                        @item.NgayTra.Value.ToString("dd/MM/yyyy HH:mm")
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex gap-2">
                            @if (item.TrangThai == QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaDuyet && !item.NgayTra.HasValue)
                            {
                                <button class="btn btn-sm btn-success flex-fill" onclick="openLapPhieuTraModal('@item.MaPhieu')">
                                    <i class="fas fa-undo-alt me-1"></i> Trả tài liệu
                                </button>
                            }
                            <button class="btn btn-sm btn-outline-primary flex-fill" onclick="openXemPhieuModal('@item.MaPhieu')">
                                <i class="fas fa-eye me-1"></i> Chi tiết
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Pagination -->
<div class="history-pagination mt-4">
    <div class="row align-items-center">
        <div class="col-md-6">
            <div class="pagination-info">
                Hiển thị <span id="startRecord">1</span> - <span id="endRecord">10</span> 
                trong tổng số <span id="totalFilteredRecords">@Model.Count()</span> phiếu
            </div>
        </div>
        <div class="col-md-6">
            <nav aria-label="History pagination">
                <ul class="pagination justify-content-md-end mb-0" id="historyPagination">
                    <!-- Pagination will be generated by JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

@functions {
    private string GetStatusClass(QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu status)
    {
        return status switch
        {
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.ChoDuyet => "status-pending",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaDuyet => "status-borrowed",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaTra => "status-returned",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.TuChoi => "status-rejected",
            _ => "status-default"
        };
    }

    private string GetStatusText(QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu status)
    {
        return status switch
        {
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.ChoDuyet => "Chờ duyệt",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaDuyet => "Đang mượn",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.DaTra => "Đã trả",
            QuanLyTaiLieuKhoaHoc.Web.Models.TrangThaiPhieu.TuChoi => "Từ chối",
            _ => "Không xác định"
        };
    }
}

@section Scripts {
<script>
    $(document).ready(function() {
        let currentPage = 1;
        const itemsPerPage = 9;
        let filteredCards = [];

        // Initialize pagination
        function initializePagination() {
            filteredCards = $('.history-card').toArray();
            updatePagination();
            showPage(1);
        }

        // Show specific page
        function showPage(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            
            $('.history-card').hide();
            filteredCards.slice(startIndex, endIndex).forEach(card => {
                $(card).show();
            });
            
            updatePaginationInfo(startIndex + 1, Math.min(endIndex, filteredCards.length));
        }

        // Update pagination controls
        function updatePagination() {
            const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
            const pagination = $('#historyPagination');
            pagination.empty();

            if (totalPages <= 1) {
                pagination.hide();
                return;
            }

            pagination.show();

            // Previous button
            const prevBtn = $('<li class="page-item">')
                .append($('<a class="page-link" href="#" aria-label="Previous">')
                    .append('<span aria-hidden="true">&laquo;</span>'));
            
            if (currentPage === 1) {
                prevBtn.addClass('disabled');
            } else {
                prevBtn.find('a').click(function(e) {
                    e.preventDefault();
                    if (currentPage > 1) {
                        currentPage--;
                        showPage(currentPage);
                        updatePagination();
                    }
                });
            }
            pagination.append(prevBtn);

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = $('<li class="page-item">')
                    .append($('<a class="page-link" href="#">').text(i));
                
                if (i === currentPage) {
                    pageItem.addClass('active');
                } else {
                    pageItem.find('a').click(function(e) {
                        e.preventDefault();
                        currentPage = i;
                        showPage(currentPage);
                        updatePagination();
                    });
                }
                pagination.append(pageItem);
            }

            // Next button
            const nextBtn = $('<li class="page-item">')
                .append($('<a class="page-link" href="#" aria-label="Next">')
                    .append('<span aria-hidden="true">&raquo;</span>'));
            
            if (currentPage === totalPages) {
                nextBtn.addClass('disabled');
            } else {
                nextBtn.find('a').click(function(e) {
                    e.preventDefault();
                    if (currentPage < totalPages) {
                        currentPage++;
                        showPage(currentPage);
                        updatePagination();
                    }
                });
            }
            pagination.append(nextBtn);
        }

        // Update pagination info
        function updatePaginationInfo(start, end) {
            $('#startRecord').text(start);
            $('#endRecord').text(end);
            $('#totalFilteredRecords').text(filteredCards.length);
        }

        // Filter cards
        function filterCards() {
            const searchTerm = $('#historySearch').val().toLowerCase();
            const statusFilter = $('#statusFilter').val();
            const sortFilter = $('#sortFilter').val();

            filteredCards = $('.history-card').filter(function() {
                const card = $(this);
                const matchesSearch = card.data('search').includes(searchTerm);
                const matchesStatus = !statusFilter || card.data('status') === statusFilter;
                return matchesSearch && matchesStatus;
            }).toArray();

            // Sort cards
            filteredCards.sort(function(a, b) {
                const cardA = $(a);
                const cardB = $(b);
                
                switch(sortFilter) {
                    case 'oldest':
                        return new Date(cardA.data('date')) - new Date(cardB.data('date'));
                    case 'newest':
                        return new Date(cardB.data('date')) - new Date(cardA.data('date'));
                    case 'overdue':
                        // Sort by overdue status first, then by date
                        const aOverdue = cardA.find('.text-danger').length > 0;
                        const bOverdue = cardB.find('.text-danger').length > 0;
                        if (aOverdue && !bOverdue) return -1;
                        if (!aOverdue && bOverdue) return 1;
                        return new Date(cardB.data('date')) - new Date(cardA.data('date'));
                    default:
                        return new Date(cardB.data('date')) - new Date(cardA.data('date'));
                }
            });

            currentPage = 1;
            updatePagination();
            showPage(1);
            updateStats();
        }

        // Update statistics
        function updateStats() {
            $('#totalRecords').text(filteredCards.length);
            $('#pendingReturns').text(filteredCards.filter(card => 
                $(card).data('status') === 'DaDuyet' && 
                $(card).find('.text-danger').length > 0
            ).length);
            $('#completedReturns').text(filteredCards.filter(card => 
                $(card).data('status') === 'DaTra'
            ).length);
        }

        // Event listeners
        $('#historySearch').on('input', function() {
            filterCards();
        });

        $('#clearHistorySearch').on('click', function() {
            $('#historySearch').val('');
            filterCards();
        });

        $('#statusFilter, #sortFilter').on('change', function() {
            filterCards();
        });

        // Initialize
        initializePagination();
    });

    // Existing modal functions
    window.openTraPhieuModal = function(maPhieu) {
        $('#traPhieuModal').remove();
        $('body').append('<div class="modal fade" id="traPhieuModal" tabindex="-1" aria-labelledby="traPhieuModalLabel" aria-hidden="true"><div class="modal-dialog"><div class="modal-content"></div></div></div>');
        $.get('/PhieuMuonTra/LapPhieuTra', { maPhieu: maPhieu }, function(html) {
            $('#traPhieuModal .modal-content').html(html);
            $('#traPhieuModal').modal('show');
        });
    };

    // Submit form trả tài liệu qua AJAX
    $(document).on('submit', '#lapPhieuTraForm', function(e) {
        e.preventDefault();
        var form = $(this);
        var formData = form.serialize();
        var submitBtn = form.find('button[type="submit"]');
        var originalText = submitBtn.html();
        submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Đang xử lý...');
        submitBtn.prop('disabled', true);
        $.post('/PhieuMuonTra/LapPhieuTra', formData, function(response) {
            if (response.success) {
                toastr.success(response.message);
                $('#traPhieuModal').modal('hide');
                setTimeout(function() { location.reload(); }, 1000);
            } else {
                toastr.error(response.message);
            }
        }).fail(function() {
            toastr.error('Có lỗi xảy ra khi trả tài liệu!');
        }).always(function() {
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
        });
    });

    // Reset nội dung modal
    $(document).on('hidden.bs.modal', '#traPhieuModal', function () {
        $(this).find('.modal-content').html('');
    });
</script>
}



<script>
    document.addEventListener('DOMContentLoaded', function () {
        $(document).on('click', '.btn-xem-phieu', function () {
            var maPhieu = $(this).data('maphieu');
            $('#xemPhieuModal').remove();

            $('body').append(`
                <div class="modal fade" id="xemPhieuModal" tabindex="-1" aria-labelledby="xemPhieuModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content"></div>
                    </div>
                </div>
            `);

            $.get('/PhieuMuonTra/XemPhieu?maPhieu=' + maPhieu)
                .done(function (html) {
                    $('#xemPhieuModal .modal-content').html(html);
                    var modal = new bootstrap.Modal(document.getElementById('xemPhieuModal'));
                    modal.show();
                })
                .fail(function (xhr) {
                    alert('Không thể tải nội dung phiếu: ' + xhr.status);
                });
        });
    });
</script>
